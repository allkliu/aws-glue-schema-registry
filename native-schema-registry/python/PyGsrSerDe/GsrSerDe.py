# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GsrSerDe
else:
    import _GsrSerDe

try:
    import builtins as __builtin__
except ImportError:
    import builtins

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class read_only_byte_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, data):
        _GsrSerDe.read_only_byte_array_swiginit(self, _GsrSerDe.new_read_only_byte_array(data))
    __swig_destroy__ = _GsrSerDe.delete_read_only_byte_array

    def get_data(self):
        return _GsrSerDe.read_only_byte_array_get_data(self)

    def get_len(self):
        return _GsrSerDe.read_only_byte_array_get_len(self)

# Register read_only_byte_array in _GsrSerDe:
_GsrSerDe.read_only_byte_array_swigregister(read_only_byte_array)

class mutable_byte_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, len):
        _GsrSerDe.mutable_byte_array_swiginit(self, _GsrSerDe.new_mutable_byte_array(len))
    __swig_destroy__ = _GsrSerDe.delete_mutable_byte_array

    def get_data(self):
        return _GsrSerDe.mutable_byte_array_get_data(self)

    def get_max_len(self):
        return _GsrSerDe.mutable_byte_array_get_max_len(self)

# Register mutable_byte_array in _GsrSerDe:
_GsrSerDe.mutable_byte_array_swigregister(mutable_byte_array)

class glue_schema_registry_schema(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, schema_name, schema_def, data_format):
        _GsrSerDe.glue_schema_registry_schema_swiginit(self, _GsrSerDe.new_glue_schema_registry_schema(schema_name, schema_def, data_format))
    __swig_destroy__ = _GsrSerDe.delete_glue_schema_registry_schema

    def get_schema_name(self):
        return _GsrSerDe.glue_schema_registry_schema_get_schema_name(self)

    def get_schema_def(self):
        return _GsrSerDe.glue_schema_registry_schema_get_schema_def(self)

    def get_data_format(self):
        return _GsrSerDe.glue_schema_registry_schema_get_data_format(self)

# Register glue_schema_registry_schema in _GsrSerDe:
_GsrSerDe.glue_schema_registry_schema_swigregister(glue_schema_registry_schema)

class glue_schema_registry_serializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GsrSerDe.glue_schema_registry_serializer_swiginit(self, _GsrSerDe.new_glue_schema_registry_serializer())
    __swig_destroy__ = _GsrSerDe.delete_glue_schema_registry_serializer

    def encode(self, array, transport_name, gsr_schema):
        return _GsrSerDe.glue_schema_registry_serializer_encode(self, array, transport_name, gsr_schema)

# Register glue_schema_registry_serializer in _GsrSerDe:
_GsrSerDe.glue_schema_registry_serializer_swigregister(glue_schema_registry_serializer)

class glue_schema_registry_deserializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GsrSerDe.glue_schema_registry_deserializer_swiginit(self, _GsrSerDe.new_glue_schema_registry_deserializer())
    __swig_destroy__ = _GsrSerDe.delete_glue_schema_registry_deserializer

    def decode(self, array):
        return _GsrSerDe.glue_schema_registry_deserializer_decode(self, array)

    def can_decode(self, array):
        return _GsrSerDe.glue_schema_registry_deserializer_can_decode(self, array)

    def decode_schema(self, array):
        return _GsrSerDe.glue_schema_registry_deserializer_decode_schema(self, array)

# Register glue_schema_registry_deserializer in _GsrSerDe:
_GsrSerDe.glue_schema_registry_deserializer_swigregister(glue_schema_registry_deserializer)



